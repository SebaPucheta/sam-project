AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-project
Transform:
- AWS::Serverless-2016-10-31

Resources:

  # DynamoDB table to store users
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Users
      PrimaryKey:
        Name: email
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # Secret
  MySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: sam-project
      Description: 'Secret for sam-project'
      SecretString: !Sub |
        {
          "USERS_TABLE_NAME": "Users"
        }
  MyAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties: 
      Handler: build/infrastructure/handlers/auth/authorizer.handler
      Runtime: nodejs20.x
      CodeUri: ./
      MemorySize: 128
      Timeout: 100
      Description: Lambda function that acts as an authorizer for API Gateway
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
          - Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: !Ref MySecret
      Environment:
        Variables:
          SECRET_NAME: !Ref MySecret
          NODE_ENV: ""
          AUTH_PRIVATE_KEY: ""

  # API Gateway
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          MyCustomAuthorizer:
            FunctionArn: !GetAtt MyAuthorizerFunction.Arn
            Identity: 
              Headers:
                - Authorization
              ReauthorizeEvery: 0
            FunctionPayloadType: REQUEST
            EnableSimpleResponses: true

  # This is a monolithic function
  samProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sam-project-function
      Handler: build/infrastructure/handlers/lambda-handler.handler
      Runtime: nodejs20.x
      CodeUri: ./
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: SAM project base.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource: !Ref MySecret
      Environment:
        Variables:
          SECRET_NAME: !Ref MySecret
          NODE_ENV: ""
          USERS_TABLE_NAME: ""
          MONGODB_CONNECTION_STRING: ""
          AUTH_PRIVATE_KEY: ""
      Events:
        GetAllCars:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /cars
            Method: GET
            Auth:
              Authorizer: MyCustomAuthorizer
        GetCarById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /cars/{id}
            Method: GET
            Auth:
              Authorizer: MyCustomAuthorizer
        PostCars:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /cars
            Method: POST
            Auth:
              Authorizer: MyCustomAuthorizer
        SignUp:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /sign-up
            Method: POST
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /login
            Method: POST

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
##ApplicationInsightsMonitoring:
##  Type: AWS::ApplicationInsights::Application
##  Properties:
##    ResourceGroupName:
##      Ref: ApplicationResourceGroup
##    AutoConfigurationEnabled: 'true'

Globals:
  Function:
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
