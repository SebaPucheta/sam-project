AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-project
Transform:
- AWS::Serverless-2016-10-31

Resources:

  # DynamoDB table to store users
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: Users
      PrimaryKey:
        Name: email
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # Cognito User Pool
  MyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: angular-19-project
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      UserPoolAddOns:
        AdvancedSecurityMode: 'OFF'
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  # Cognito User Pool Client
  MyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyUserPool
      ClientName: MyUserPoolClient
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - "https://example.com/callback"
      LogoutURLs:
        - "https://example.com/logout"

  # Secret
  MySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: sam-project
      Description: 'Secret for sam-project'
      SecretString: !Sub |
        {
          "USERS_TABLE_NAME": "Users"
        }
  #MyAuthorizerFunction:
  #  Type: AWS::Serverless::Function
  #  Properties: 
  #    Handler: build/infrastructure/handlers/auth/authorizer.handler
  #    Runtime: nodejs20.x
  #    CodeUri: ./
  #    MemorySize: 128
  #    Timeout: 100
  #    Description: Lambda function that acts as an authorizer for API Gateway
  #    Policies:
  #      - AWSLambdaBasicExecutionRole
  #      - Statement:
  #        - Effect: Allow
  #          Action:
  #          - secretsmanager:GetSecretValue
  #          Resource: !Ref MySecret
  #    Environment:
  #      Variables:
  #        SECRET_NAME: !Ref MySecret
  #        NODE_ENV: ""
  #        AUTH_PRIVATE_KEY: ""

  # API Gateway
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt MyUserPool.Arn
            IdentitySource: method.request.header.Authorization
      Cors:
        AllowMethods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,Access-Control-Allow-Origin'"
        AllowOrigin: "'*'"

  # This is a monolithic function
  samProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: sam-project-function
      Handler: build/infrastructure/handlers/lambda-handler.handler
      Runtime: nodejs20.x
      CodeUri: ./
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: SAM project base.
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Ref UsersTable
      - Statement:
        - Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource: !Ref MySecret
      Environment:
        Variables:
          SECRET_NAME: !Ref MySecret
          NODE_ENV: ""
          MONGODB_CONNECTION_STRING: ""
      Events:
        GetAllCars:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /cars
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        GetCarById:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /cars/{id}
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        PostCars:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /cars
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateCar:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /cars/{id}
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
        DeleteCar:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /cars/{id}
            Method: DELETE
            Auth:
              Authorizer: CognitoAuthorizer
      
      #  SignUp:
      #    Type: Api
      #    Properties:
      #      RestApiId: !Ref MyApi
      #      Path: /sign-up
      #      Method: POST
      #  Login:
      #    Type: Api
      #    Properties:
      #      RestApiId: !Ref MyApi
      #      Path: /login
      #      Method: POST

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
##ApplicationInsightsMonitoring:
##  Type: AWS::ApplicationInsights::Application
##  Properties:
##    ResourceGroupName:
##      Ref: ApplicationResourceGroup
##    AutoConfigurationEnabled: 'true'

Globals:
  Function:
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
